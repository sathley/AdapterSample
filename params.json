{"name":"Appacitive QueryAdapter Sample","tagline":"A sample android app to demonstrate a pattern of using AppacitiveQueryAdapter for Listview or Gridview.","body":"AppacitiveQueryAdapter\r\n======================\r\n\r\nA sample android app to demonstrate a pattern of using __AppacitiveQueryAdapter__ with _ListView_ or _GridView_.\r\n\r\nThis example demonstrates how you can create a _AppacitiveObjectQueryAdapter_ by extending the _BaseAdapter_ to feed a _ListView_ or _GridView_ with [appacitive][4] entities like objects, connections, users or devices.\r\n\r\n[4]: <http://appacitive.com/>\r\n\r\nThis example app creates an adapter for cricket players which are objects of schema type _player_.\r\n\r\nTo know more about schema types on appacitive, check [this][3] out.\r\n\r\n[3]: <http://help.appacitive.com/v1.0/index.html#android/data_objects>\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\npublic class AppacitiveObjectQueryAdapter extends BaseAdapter { \r\n\r\n    private Context mContext;\r\n    private String mType;            //  schema type\r\n    private List<String> mFields;    //  fields to fetch from the server. use this to reduce network payloads\r\n    private long mPageNumber = 1;    //  default\r\n    private long mPageSize = 10;     //  default\r\n    private long mTotalRecords = 0;  //  for now\r\n    final private List<AppacitiveObject> mObjects = new ArrayList<AppacitiveObject>();  //  the data source for this adapter\r\n    private AppacitiveQuery query = null;\r\n\r\n    ...\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nThe constructor sets the internal fields of the adapter.\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\npublic AppacitiveObjectQueryAdapter(Context context, String type, ListString fields, AppacitiveQuery query) { \r\n    this.mContext = context; \r\n    this.mType = type; \r\n    this.mFields = fields; \r\n    this.query = query; \r\n    if (query.pageNumber > 0) \r\n        this.mPageNumber = query.pageNumber; \r\n    if (query.pageSize > 0) this.mPageSize = query.pageSize;\r\n\r\n    //  Populate the data source\r\n    getCurrentPage(); \r\n}\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nAnd now we have overridden `BaseAdapters `methods like `getItem(int position)`, `getCount()`, `isEmpty()` and `getItemId(int position)` for them to use the internal array `mObjects` as the data source.\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n@Override \r\npublic AppacitiveObject getItem(int i) { return this.mObjects.get(i); }\r\n\r\n@Override \r\npublic int getCount() { return mObjects.size(); }\r\n\r\n@Override \r\npublic boolean isEmpty() { return getCount() == 0; }\r\n\r\n...\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nSome additional helper methods are provided like `clear()`, `addItem(AppacitiveObject player)`, \r\n\r\n`addAll(Collection<AppacitiveObject> playerCollection)`, `removeObject(AppacitiveObject player) `etc. to easily manipulate the data recieved from appacitive.\r\n\r\nThe `getCurrentPage()` fetches the players from _appacitive_ and notifies the ListView when new data is available by calling the `notifyDataSetChanged()`. The `getNextPage()` and `getPreviousPage()` rely on this method internally.\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    public void getCurrentPage() {\r\n        this.query.pageNumber = this.mPageNumber;\r\n        this.query.pageSize = this.mPageSize;\r\n        //  Fetch objects from appacitive as requested by the query.\r\n        AppacitiveObject.findInBackground(this.mType, this.query, this.mFields, new Callback<PagedList<AppacitiveObject>>() {\r\n            @Override\r\n            public void success(PagedList<AppacitiveObject> result) {\r\n\r\n                //  Set the totalrecords field of the adapter for paging help\r\n                mTotalRecords = result.pagingInfo.totalRecords;\r\n\r\n                //  Clear out the existing objects from adapter and add the new ones.\r\n                mObjects.clear();\r\n                mObjects.addAll(result.results);\r\n\r\n                //  Notify listeners there is a fresh list of objects.\r\n                notifyDataSetChanged();\r\n\r\n                //  Paging utility toast\r\n                Toast.makeText(getContext(), String.format(\"Showing page \" + mPageNumber + \" of \" + (int) Math.ceil((double) mTotalRecords / (double) mPageSize) + \".\"), Toast.LENGTH_LONG).show();\r\n            }\r\n            @Override\r\n            public void failure(PagedList<AppacitiveObject> result, Exception e) \r\n            {\r\n                Log.e(\"APPACITIVE\", e.getMessage());\r\n            }\r\n        });\r\n    }\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nAnd now you can override `getView()` to return a view of your choice.\r\n\r\nIn the example, we are returning an _imageView_ with the player's head shot and a _textView_ with the player's name.\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n@Override\r\npublic View getView(int i, View view, ViewGroup viewGroup) {\r\n    LayoutInflater li = LayoutInflater.from(getContext());\r\n    View playerItem = li.inflate(R.layout.player_item, null, false);\r\n    ImageView photoView = (ImageView) playerItem.findViewById(R.id.imageView);\r\n    TextView nameView = (TextView) playerItem.findViewById(R.id.name);\r\n\r\n    AppacitiveObject player = getItem(i);\r\n    String playerName = player.getPropertyAsString(\"name\");\r\n    String photoUrl = player.getPropertyAsString(\"photo_url\");\r\n\r\n    nameView.setText(playerName);\r\n    Picasso.with(getContext())\r\n        .load(photoUrl)\r\n        .placeholder(R.drawable.placeholder)\r\n        .into(photoView);\r\n\r\n    return playerItem;\r\n}\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nAnd finally just attach your _AppacitiveObjectQueryAdapter_ to your _listView_ with your desired _AppacitiveQuery_.\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    AppacitiveQuery query = new AppacitiveQuery();\r\n    query.pageNumber = 1;\r\n    query.pageSize = 5;\r\n    query.filter = new PropertyFilter(\"team\").isEqualTo(\"India\");\r\n    List<String> fields = null;\r\n    //  Tell the adapter to fire this query on the 'player' schema type.\r\n    AppacitiveObjectQueryAdapter mAdapter = new AppacitiveObjectQueryAdapter(this, \"player\", fields, query);\r\n    mListView.setAdapter(mAdapter);\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nThe next and previous button click listeners are programmed to instruct the adapter to fetch the next of previous batch of players respectively.\r\n\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n    mNextButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                mAdapter.getNextPage();\r\n            }\r\n        });\r\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n## Screenshot\r\n\r\n![screenshot](https://raw.github.com/sathley/AdapterSample/master/screenshot.png)\r\n\r\n__Footnote__ :\r\nThis example depends on [appacitive android sdk][2] and the amazing image downloading and caching library [picasso][1] by Square.\r\n[2]: <https://github.com/appacitive/appacitive-sdk-core>\r\n[1]: <http://square.github.io/picasso/>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}